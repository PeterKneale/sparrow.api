/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="list-group-item">
        <span dangerouslySetInnerHTML={this.rawMarkup()}></span>
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    //var newComments = comments.concat([comment]);
    //this.setState({data: newComments});
    console.log(comment);

    $.ajax({
      url: this.props.url,
      dataType: 'json',
      contentType: "application/json; charset=utf-8",
      type: 'POST',
      data: JSON.stringify(comment),
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div>
          <div className="panel panel-primary">
            <div className="panel-heading"><h3 className="panel-title">Add new user</h3></div>
            <div className="panel-body">
              <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
          </div>
          
          <div className="panel panel-primary">
            <div className="panel-heading"><h3 className="panel-title">Users</h3></div>
            <CommentList data={this.state.data} />
          </div>
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment key={comment.id}>
          {comment.first_name} {comment.last_name}  
        </Comment>
      );
    });
    return (
      <div className="commentList list-group">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {first_name: '', last_name: ''};
  },
  handleFirstNameChange: function(e) {
    this.setState({first_name: e.target.value});
  },
  handleLastNameChange: function(e) {
    this.setState({last_name: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var first_name = this.state.first_name.trim();
    var last_name = this.state.last_name.trim();
    if (!first_name || !last_name) {
      return;
    }
    this.props.onCommentSubmit({first_name: first_name, last_name: last_name});
    this.setState({first_name: '', last_name: ''});
  },
  render: function() {
    return (
      <form className="form-inline" onSubmit={this.handleSubmit}>
        <div className="form-group">
            <input
                id="firstname"
                type="text"
                placeholder="First Name"
                className="form-control"
                value={this.state.first_name}
                onChange={this.handleFirstNameChange}
            />
        </div>
        <div className="form-group">
            <input
                id="lastname"
                type="text"
                placeholder="Last Name"
                className="form-control"
                value={this.state.last_name}
                onChange={this.handleLastNameChange}
            />
        </div>
        <button type="submit" className="btn btn-primary">Submit</button>
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/users" pollInterval={5000} />,
  document.getElementById('content')
);
